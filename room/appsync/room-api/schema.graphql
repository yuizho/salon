type Mutation {
  openRoom: Operation @aws_api_key
  join(room_id: String!): Operation @aws_api_key
  leave(room_id: String!, user_id: String!): Operation @aws_api_key
  pick(room_id: String!, user_id: String!, picked_card: String!): Operation
    @aws_api_key
  refreshTable(room_id: String!, user_id: String!): Operation @aws_api_key
  heartbeat(room_id: String!, user_id: String!): Operation @aws_api_key
  updatePoker(
    room_id: String!
    user_id: String!
    status: Status!
    picked_card: String
    operated_at: AWSDateTime!
    joined_at: AWSDateTime!
  ): Poker @aws_iam
}

type Query {
  getRoom(room_id: String!): Room @aws_api_key
}

type Subscription {
  onUpdatePoker(room_id: String): Poker
    @aws_subscribe(mutations: ["updatePoker"])
    @aws_api_key
}

type Operation @aws_api_key {
  event_id: String
  room_id: String
  user_id: String
  op_type: OperationType
  operated_at: String
  picked_card: String
}

enum OperationType {
  OPEN_ROOM
  JOIN
  LEAVE
  PICK
  REFRESH_TABLE
  HEARTBEAT
}

type Room @aws_api_key @aws_iam {
  items: [Poker]
}

type Poker @aws_api_key @aws_iam {
  room_id: String!
  user_id: String!
  status: Status!
  picked_card: String
  operated_at: AWSDateTime!
  joined_at: AWSDateTime!
}

enum Status {
  CHOOSING
  CHOSEN
  LEAVED
}
